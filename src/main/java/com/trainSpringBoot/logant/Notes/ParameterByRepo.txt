
# Spring Data Repository Accepted Argument Types

----------------------------------------------------------------------------------------
Spring Data repository methods accept a variety of argument types, allowing you to build 
flexible queries by method names, annotated queries, or specifications. 
Here’s a breakdown of commonly accepted argument types:
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 1. Entity Field Parameters
   - Directly use entity fields as method parameters to create dynamic query methods based on
     naming conventions.
   - For example, in a `UserRepository`, you can have:
     ```java
     List<User> findByLastName(String lastName);
     List<User> findByFirstNameAndAge(String firstName, int age);
     ```
   - **Supported Types**: These parameters can be of any type that matches the entity’s 
      field (e.g., `String`, `Long`, `int`, `Date`, etc.).
----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------
## 2. `@Param` Annotation for Named Parameters
   - When using `@Query` annotations, you can use `@Param` to specify named parameters in
     custom queries.
   - Example:
     ```java
     @Query("SELECT u FROM User u WHERE u.lastName = :lastName")
     List<User> findByLastName(@Param("lastName") String lastName);
     ```
----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------
## 3. `Sort` and `Pageable` for Sorting and Pagination
   - **`Sort`**: Allows specifying the sort order in query results.
     ```java
     List<User> findByLastName(String lastName, Sort sort);
     ```
   - **`Pageable`**: Enables pagination support.
     ```java
     Page<User> findByLastName(String lastName, Pageable pageable);
     ```
----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------
## 4. Optional Parameters
   - You can use `Optional<T>` as a parameter type to indicate that a value is optional.
   - Example:
     ```java
     List<User> findByFirstName(Optional<String> firstName);
     ```
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 5. Java 8 Date/Time Types
   - Spring Data supports Java 8 date/time types as parameters, such as `LocalDate`, `LocalDateTime`, `Instant`, etc.
   - Example:
     ```java
     List<User> findByCreatedDateAfter(LocalDate date);
     ```
----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------
## 6. Collection Types
   - **`Collection<T>`** (e.g., `List`, `Set`): Useful for `IN` queries, allowing you to pass a collection of values.
   - Example:
     ```java
     List<User> findByLastNameIn(List<String> lastNames);
     ```
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 7. Specification Arguments
   - If you are using JPA’s `Specification` interface, you can pass it to repository methods that extend `JpaSpecificationExecutor`.
   - Example:
     ```java
     List<User> findAll(Specification<User> spec);
     ```
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 8. Example (Query by Example)
   - If the repository extends `QueryByExampleExecutor`, you can pass an `Example<T>` instance to perform query-by-example operations.
   - Example:
     ```java
     Example<User> example = Example.of(new User("John", "Doe"));
     List<User> findAll(Example<User> example);
     ```
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 9. Reactive-Specific Arguments (Reactive Repositories Only)
   - Reactive repositories can accept reactive types, such as `Mono<T>` or `Flux<T>`, as arguments.
   - Example:
     ```java
     Mono<User> findByLastName(Mono<String> lastName);
     ```
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 10. Custom DTOs or Projection Interfaces
   - You can pass arguments that match fields or parameters of custom DTOs or projection interfaces.
   - Example with projection:
     ```java
     List<UserProjection> findByLastName(String lastName);
     ```
----------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------
## 11. Primitive Types
   - Primitive types like `int`, `long`, `boolean`, etc., are also acceptable as arguments as long as they correspond to entity field types.
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
## 12. Other Supported Types
   - **UUID**: Useful if you use UUIDs as identifiers.
   - **Enums**: Can be used for querying by fields that are enums in your entity.
----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------
### Summary of Commonly Accepted Argument Types in Spring Data Repositories

- **Standard Repository**: 
  - `List<T>`, `Set<T>`, `Collection<T>`, `Stream<T>`, `Streamable<T>`, `Page<T>`, `Slice<T>`, `Optional<T>`, `T`, `Iterable<T>`
  - **Async Support**: `Future<T>`, `CompletableFuture<T>`
  - **Custom Projections**: Projection interfaces, custom DTOs
  
- **Reactive Repository**:
  - `Flux<T>`, `Mono<T>`

Each type gives you the flexibility to structure queries in ways that match your application’s specific data access requirements.
